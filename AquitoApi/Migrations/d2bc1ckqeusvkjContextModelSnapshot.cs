// <auto-generated />
using System;
using AquitoApi.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AquitoApi.Migrations
{
    [DbContext(typeof(d2bc1ckqeusvkjContext))]
    partial class d2bc1ckqeusvkjContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AquitoApi.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clientid")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Cedula")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cedula");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("lastname");

                    b.Property<string>("Licence")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("licence");

                    b.Property<string>("Licencepic")
                        .HasMaxLength(650)
                        .HasColumnType("character varying(650)")
                        .HasColumnName("licencepic");

                    b.Property<string>("Nacionality")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("nacionality");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Typeblood")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("typeblood");

                    b.Property<int?>("Useraquitoid")
                        .HasColumnType("integer")
                        .HasColumnName("useraquitoid");

                    b.Property<string>("Userpic")
                        .HasMaxLength(650)
                        .HasColumnType("character varying(650)")
                        .HasColumnName("userpic");

                    b.HasKey("Id");

                    b.HasIndex("Useraquitoid");

                    b.ToTable("client");
                });

            modelBuilder.Entity("AquitoApi.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reservationid")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Clientid")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal?>("Totalpay")
                        .HasColumnType("numeric")
                        .HasColumnName("totalpay");

                    b.Property<int?>("Useraquitoid")
                        .HasColumnType("integer")
                        .HasColumnName("useraquitoid");

                    b.Property<int?>("Vehicleid")
                        .HasColumnType("integer")
                        .HasColumnName("vehicleid");

                    b.HasKey("Id");

                    b.HasIndex("Clientid");

                    b.HasIndex("Useraquitoid");

                    b.HasIndex("Vehicleid");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("AquitoApi.Entities.Roleaquito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AquitoApi.Entities.Typevehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("typevehicleid")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Namevehicle")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("namevehicle");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("typevehicle");
                });

            modelBuilder.Entity("AquitoApi.Entities.Useraquito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("useraquito");
                });

            modelBuilder.Entity("AquitoApi.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicleid")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Brand")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("brand");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<string>("Matricula")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("matricula");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("model");

                    b.Property<int?>("Passengers")
                        .HasColumnType("integer")
                        .HasColumnName("passengers");

                    b.Property<decimal?>("Priceday")
                        .HasColumnType("numeric")
                        .HasColumnName("priceday");

                    b.Property<string>("Securitynum")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("securitynum");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("Typevehicleid")
                        .HasColumnType("integer")
                        .HasColumnName("typevehicleid");

                    b.Property<int?>("Useraquitoid")
                        .HasColumnType("integer")
                        .HasColumnName("useraquitoid");

                    b.Property<string>("Vehiclepic")
                        .HasMaxLength(650)
                        .HasColumnType("character varying(650)")
                        .HasColumnName("vehiclepic");

                    b.Property<decimal?>("Weightcapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("weightcapacity");

                    b.HasKey("Id");

                    b.HasIndex("Typevehicleid");

                    b.HasIndex("Useraquitoid");

                    b.ToTable("vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AquitoApi.Entities.Client", b =>
                {
                    b.HasOne("AquitoApi.Entities.Useraquito", "Useraquito")
                        .WithMany("Clients")
                        .HasForeignKey("Useraquitoid")
                        .HasConstraintName("fk_useraquito_client");

                    b.Navigation("Useraquito");
                });

            modelBuilder.Entity("AquitoApi.Entities.Reservation", b =>
                {
                    b.HasOne("AquitoApi.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("fk_client_reservation");

                    b.HasOne("AquitoApi.Entities.Useraquito", "Useraquito")
                        .WithMany("Reservations")
                        .HasForeignKey("Useraquitoid")
                        .HasConstraintName("fk_useraquito_reservation");

                    b.HasOne("AquitoApi.Entities.Vehicle", "Vehicle")
                        .WithMany("Reservations")
                        .HasForeignKey("Vehicleid")
                        .HasConstraintName("fk_vehicle_reservation");

                    b.Navigation("Client");

                    b.Navigation("Useraquito");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AquitoApi.Entities.Vehicle", b =>
                {
                    b.HasOne("AquitoApi.Entities.Typevehicle", "Typevehicle")
                        .WithMany("Vehicles")
                        .HasForeignKey("Typevehicleid")
                        .HasConstraintName("fk_typevehicle_vehicle");

                    b.HasOne("AquitoApi.Entities.Useraquito", "Useraquito")
                        .WithMany("Vehicles")
                        .HasForeignKey("Useraquitoid")
                        .HasConstraintName("fk_useraquito_vehicle");

                    b.Navigation("Typevehicle");

                    b.Navigation("Useraquito");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AquitoApi.Entities.Roleaquito", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AquitoApi.Entities.Useraquito", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AquitoApi.Entities.Useraquito", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AquitoApi.Entities.Roleaquito", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AquitoApi.Entities.Useraquito", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AquitoApi.Entities.Useraquito", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AquitoApi.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AquitoApi.Entities.Typevehicle", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AquitoApi.Entities.Useraquito", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Reservations");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AquitoApi.Entities.Vehicle", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
