@page "/clientes"
@attribute [Authorize]
@inject HttpClient _http
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject Tewr.Blazor.FileReader.IFileReaderService fileReader

<h1 class="text-center">Gestión de Cliente</h1>
<MudNavLink Href="/" Icon="@Icons.Filled.ArrowBack" Style="width: 150px">Regresar</MudNavLink>
<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Registrar Clientes</strong></MudText>
        <MudExpansionPanel Style="max-width: 1000px" IsExpanded="true" HideIcon="true">
            <TitleContent>
                <div class="d-flex pl-5">
                    <MudIcon Icon="@Icons.Material.Outlined.People" Style=" color: #3f51b5" class="mr-3"> </MudIcon>
                    <MudText><strong>Información Principal</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Cedula" Label="Cedula" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="FirstName" Label="Nombre" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="LastName" Label="Apellido" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Email" Label="Correo" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Licencia" Label="Licencia" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Nacionality" Label="Nacionalidad" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudGrid Spacing="2">
                            <MudItem xs="12" sm="12" md="12">
                                <input type="file" name="image" @ref="inputReference1" @onchange="async() =>await OpenFile(1)" />
                                <MudButton OnClick="async() =>await UploadFile(1)"
                                           Variant="_variant"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           FullWidth="true">
                                    Subir Imagen Cliente
                                </MudButton>
                            </MudItem>
                            @if (!string.IsNullOrWhiteSpace(messageUser)) {
                                <MudItem xs="12" sm="12" md="12">
                                    <img class="img-fluid img-thumbnail" src="@UserPic" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudGrid Spacing="2">
                            <MudItem xs="12" sm="12" md="12">
                                <input type="file" name="image2" @ref="inputReference2" @onchange="async() =>await OpenFile(2)" />
                                <MudButton OnClick="async() =>await UploadFile(2)"
                                           Variant="_variant"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           FullWidth="true">
                                    Subir Imagen Licencia
                                </MudButton>
                            </MudItem>
                            @if (!string.IsNullOrWhiteSpace(messageLicence)) {
                                <MudItem xs="12" sm="12" md="12">
                                    <img class="img-fluid img-thumbnail" src="@LicencePic" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudSelect T="string" Label="Tipo de sangre" Variant=" Variant.Outlined"  @bind-Value="TipoBlood" Dense="true" Class="px-14.5px py-12.5px">
                            @foreach (var sangre in _tipoSangres) {<MudSelectItem Value="@sangre"> @sangre </MudSelectItem>}
                        </MudSelect>
                    </MudItem>
                </MudGrid>
</ChildContent>
        </MudExpansionPanel>

        <MudGrid>
            <MudItem xs="12">
                <MudCardActions>
                    <MudButton @onclick="RegistrarCliente" ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto">Registrar Cliente</MudButton>
                </MudCardActions>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Clientes Registrados</strong></MudText>
        <MudTable Items="@_clientes" Hover="@true" Striped="@true" Dense="true">
            <HeaderContent>
                <MudTh>Foto Cliente</MudTh>
                <MudTh>Cedula</MudTh>
                <MudTh>Nombre </MudTh>
                <MudTh>Apellido</MudTh>
                <MudTh>Correo</MudTh>
                <MudTh>Nacionalidad</MudTh>
                <MudTh>Sangre</MudTh>
                <MudTh>Licencia</MudTh>
                <MudTh>Editar</MudTh>
                <MudTh>Deshabilitar</MudTh>
            </HeaderContent>
            <RowTemplate>
                @if (context.Status == 0) {
                    <MudTd Class="alert-danger" DataLabel="Cliente"><MudAvatar Image="@((context.Userpic) == null ? "" : context.Userpic)">@((context.Userpic) == null ? "L" : "" )</MudAvatar></MudTd>
                    <MudTd Class="alert-danger" DataLabel="Cedula">@((context.Cedula) == null ? "" : context.Cedula)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Nombre">@((context.Firstname) == null ? "" : context.Firstname)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Apellido">@((context.Lastname) == null ? "" : context.Lastname)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Email">@((context.Email) == null ? "" : context.Email)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Nacionalidad"> @((context.Nacionality) == null ? "" : context.Nacionality)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Sangre">@((context.Typeblood) == null ? "" : context.Typeblood)</MudTd>
                    <MudTd Class="alert-danger" DataLabel="Licencia">@((context.Licence) == null ? "" : context.Licence)</MudTd>
                    <MudTd DataLabel="Editar"><MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => Editar(context.Id)"></MudIconButton></MudTd>
                    <MudTd DataLabel="Deshabilitar"><MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="() => Deshabilitar(context.Id, context.Status.Value)"></MudIconButton></MudTd> } 
                else {
                    <MudTd DataLabel="Cliente"><MudAvatar Image="@((context.Userpic) == null ? "" : context.Userpic)"></MudAvatar></MudTd>
                    <MudTd DataLabel="Cedula">@((context.Cedula) == null ? "" : context.Cedula)</MudTd>
                    <MudTd DataLabel="Nombre">@((context.Firstname) == null ? "" : context.Firstname)</MudTd>
                    <MudTd DataLabel="Apellido">@((context.Lastname) == null ? "" : context.Lastname)</MudTd>
                    <MudTd DataLabel="Email">@((context.Email) == null ? "" : context.Email)</MudTd>
                    <MudTd DataLabel="Nacionalidad"> @((context.Nacionality) == null ? "" : context.Nacionality)</MudTd>
                    <MudTd DataLabel="Sangre">@((context.Typeblood) == null ? "" : context.Typeblood)</MudTd>
                    <MudTd DataLabel="Licencia">@((context.Licence) == null ? "" : context.Licence)</MudTd>
                    <MudTd DataLabel="Editar"><MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => Editar(context.Id)"></MudIconButton></MudTd>
                    <MudTd DataLabel="Deshabilitar"><MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="() => Deshabilitar(context.Id, context.Status.Value)"></MudIconButton></MudTd>}
            </RowTemplate>
        </MudTable>
    </MudPaper>
</div>

@code {

    private List<Client> _clientes;

    public string Cedula { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string Licencia { get; set; }
    public string Nacionality { get; set; }
    public string TipoBlood { get; set; }
    public string UserPic { get; set; }
    public string UrlImage { get; set; }
    public string LicencePic { get; set; }

    private List<string> _tipoSangres = new List<string>() { "O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-" };


    string fileName = string.Empty;
    Stream fileStream = null;
    ElementReference inputReference1;
    ElementReference inputReference2;
    string messageUser = string.Empty;
    string messageLicence = string.Empty;

    private readonly Margin _margin = Margin.Dense;
    private readonly Variant _variant = Variant.Outlined;
    private readonly Adornment _adornment = Adornment.End;

    protected override async Task OnInitializedAsync() {
        _clientes = await _http.GetFromJsonAsync<List<Client>>("api/client");
    }

    private async Task UploadFile(int id) {
        //id = 1 -> Userpic
        //id = 2 -> Licenciapic
        if (fileStream != null) {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var sc = new StreamContent(fileStream, (int)fileStream.Length);
            content.Add(sc, "file", fileName);

            var imagen = await _http.PostAsync("api/image/upload", content);
            if (imagen.IsSuccessStatusCode) {
                var body = await imagen.Content.ReadAsStringAsync();
                var resultado = JObject.Parse(body);
                if (id == 1) {
                    UserPic = resultado["imageURL"].ToString();
                    messageUser = resultado["message"].ToString();
                    _snackbar.Add(messageUser, Severity.Info);


                } else {
                    LicencePic = resultado["imageURL"].ToString();
                    messageLicence = resultado["message"].ToString();
                    _snackbar.Add(messageLicence, Severity.Info);
                }

            } else {
                _snackbar.Add($"Ha ocurrido un error, por favor revisar la imagen.", Severity.Error);
            }
        } else {
            _snackbar.Add($"Primero selecciona una imagen.", Severity.Warning);
        }

    }
    private async Task OpenFile(int id) {
        IFileReference file;
        IFileInfo fileInfo;
        if (id == 1) {
            file = (await fileReader.CreateReference(inputReference1).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null) {
                return;
            }
            fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
                fileStream = new MemoryStream(ms.ToArray());
            }
        }
        if (id == 2) {
            file = (await fileReader.CreateReference(inputReference2).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null) {
                return;
            }
            fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
                fileStream = new MemoryStream(ms.ToArray());
            }
        }
    }

    private async Task RegistrarCliente() {
        Client _cliente = new() {
            Cedula = Cedula,
            Firstname = FirstName,
            Lastname = LastName,
            Email = Email,
            Licence = Licencia,
            Nacionality = Nacionality,
            Typeblood = TipoBlood,
            Userpic = UserPic,
            Licencepic = LicencePic,
            Status = 1
        };
        var clienteCreado = await _http.PostAsJsonAsync("api/client", _cliente);

        if (clienteCreado.IsSuccessStatusCode) {
            Cedula = "";
            FirstName = "";
            LastName = "";
            Email = "";
            Licencia = "";
            Nacionality = "";
            TipoBlood = "";
            UserPic = "";
            LicencePic = "";
            _snackbar.Add($"El cliente se ha registrado correctamente.", Severity.Success);
            _clientes = await _http.GetFromJsonAsync<List<Client>>("api/client");

        } else {
            _snackbar.Add($"Ha ocurrido un error, por favor revisar los datos.", Severity.Error);
        }
    }

    void Editar(int Id) {
        _navigationManager.NavigateTo($"clientes/editar/{Id.ToString()}");
    }

    async Task Deshabilitar(int Id, int status) {
        string noDisponible = "0";
        string disponible = "1";
        string json;
        HttpContent content;

        switch (status) {
            case 0:
                json = "[{\"op\": \"replace\",\"path\": \"/status\",\"value\":" + $"\"{disponible}\"" + "}]";
                content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");
                var response = await _http.PatchAsync($"api/client/{Id}", content);

                if (response.IsSuccessStatusCode) {
                    _snackbar.Add($"Cliente habilitado", Severity.Success);
                    _clientes = await _http.GetFromJsonAsync<List<Client>>("api/client");
                } else {
                    _snackbar.Add($"Ha ocurrido un error al habilitar el cliente, intente de nuevo", Severity.Error);
                }
                break;
            case 1:
                json = "[{\"op\": \"replace\",\"path\": \"/status\",\"value\":" + $"\"{noDisponible}\"" + "}]";
                content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");
                var response2 = await _http.PatchAsync($"api/client/{Id}", content);
                if (response2.IsSuccessStatusCode) {
                    _snackbar.Add($"Cliente deshabilitado", Severity.Warning);
                    _clientes = await _http.GetFromJsonAsync<List<Client>>("api/client");
                } else {
                    _snackbar.Add($"Ha ocurrido un error al deshabilitar el cliente, intente de nuevo", Severity.Error);
                }
                break;
            default:
                break;
        }

    }

}

