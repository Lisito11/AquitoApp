@page "/cobros"

@inject HttpClient Http
@attribute [Authorize]
@inject ISnackbar _snackbar

<h1 class="text-center">Gestión de Cobros</h1>
<MudNavLink Href="/" Icon="@Icons.Filled.ArrowBack" Style="width: 150px">Regresar</MudNavLink>

@if (reservaciones != null) {
    <MudGrid>
        <MudItem xs="12">
            <MudGrid Spacing="3" Justify="Justify.Center">
                @foreach (var factura in reservaciones) {
                    <MudItem>
                        <MudCard> 
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="@(factura.Status == 2 ? Color.Success : Color.Error)">$</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">AQUITO</MudText>
                                    <MudText Typo="Typo.body1">Creado por Admin</MudText>
                                    <MudText Typo="Typo.body2">@factura.Startdate.Value.ToString("yyyy-MM-dd")</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudText Typo="Typo.h6">Cliente</MudText>
                                    <MudText Typo="Typo.body1">@factura.Client.Firstname</MudText>
                                    <MudText Typo="Typo.body2">@factura.Client.Cedula</MudText>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardMedia Image="@factura.Vehicle.Vehiclepic" Height="250" />
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Descripción: @($"El vehiculo alquilado fue un {factura.Vehicle.Typevehicle.Namevehicle}.")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">Modelo: @($"El modelo del {factura.Vehicle.Typevehicle.Namevehicle} es {factura.Vehicle.Model}.")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">Matricula: @($"La matricula del {factura.Vehicle.Typevehicle.Namevehicle} es {factura.Vehicle.Matricula}")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">Dias alquilados: @($"El {factura.Vehicle.Typevehicle.Namevehicle} se alquiló durante {factura.Enddate.Value.Day - factura.Startdate.Value.Day} días.")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">El precio por dia: @($"El precio por dia del {factura.Vehicle.Typevehicle.Namevehicle} es RD${factura.Vehicle.Priceday}.")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">Total: @($"El total a pagar del {factura.Vehicle.Typevehicle.Namevehicle} es RD${factura.Vehicle.Priceday * (factura.Enddate.Value.Day - factura.Startdate.Value.Day)}.")</MudText>
                                <br />
                                <MudText Typo="Typo.body2">Se debe: @($"Se debe RD${(factura.Vehicle.Priceday * (factura.Enddate.Value.Day - factura.Startdate.Value.Day)) -factura.Totalpay}.")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                @if (factura.Status == 1 || factura.Status == 3) {
                                    <MudTextField @bind-Value="Pago" Label="Pagar factura" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
                                    <MudTooltip Text="Pagar factura">
                                        <MudFab Icon="@Icons.Material.Filled.Payment" Color="Color.Secondary" @onclick="() => RealizarPago(factura.Id, factura.Totalpay)" />
                                    </MudTooltip>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
} else {
    <MudText>Cargando... espera</MudText>
}

@code {

    private List<Reservation> reservaciones;

    public decimal Pago { get; set; }
    public decimal TotalApagar { get; set; }

    protected override async Task OnInitializedAsync() {
        reservaciones = await Http.GetFromJsonAsync<List<Reservation>>("api/reservacion");
    }

    private async Task RealizarPago(int id, decimal? total) {
        Reservation factura = await Http.GetFromJsonAsync<Reservation>($"api/reservacion/{id}");
        decimal valorActual = factura.Totalpay.Value;
        string TotalFactura = (valorActual + Pago).ToString().Replace(",", ".");
        decimal? Total = factura.Vehicle.Priceday * (factura.Enddate.Value.Day - factura.Startdate.Value.Day);

        if (decimal.Parse(TotalFactura) > Total) {
            TotalFactura = Total.Value.ToString().Replace(",", ".");
        }
        Console.WriteLine(valorActual);
        Console.WriteLine(Pago);
        Console.WriteLine(TotalFactura);
        string json = "[{\"op\": \"replace\",\"path\": \"/totalpay\",\"value\":" + $"\"{TotalFactura}\"" + "}]";
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");

        var response = await Http.PatchAsync($"api/reservacion/{id}", content);

        if (response.IsSuccessStatusCode) {

            Reservation reservation = await Http.GetFromJsonAsync<Reservation>($"api/reservacion/{id}");
            decimal seDebe = ((reservation.Vehicle.Priceday * (reservation.Enddate.Value.Day - reservation.Startdate.Value.Day)) - reservation.Totalpay).Value;

            if (seDebe == 0) {
                string statusPago = "2";
                json = "[{\"op\": \"replace\",\"path\": \"/status\",\"value\":" + $"\"{statusPago}\"" + "}]";
                content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");
                response = await Http.PatchAsync($"api/reservacion/{id}", content);
                _snackbar.Add($"Factura pagada correctamente.", Severity.Success);
                reservaciones = await Http.GetFromJsonAsync<List<Reservation>>("api/reservacion");
            } else {
                _snackbar.Add($"Factura pendiente.", Severity.Warning);
                reservaciones = await Http.GetFromJsonAsync<List<Reservation>>("api/reservacion");
            }
        } else {
            _snackbar.Add($"Ha ocurrido un error al pagar la factura", Severity.Error);

        }

        Pago = 0;
    }
}
