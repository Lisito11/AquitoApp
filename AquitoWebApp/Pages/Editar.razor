@page "/vehiculos/editar/{id}"
@attribute [Authorize]
@inject HttpClient _http
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject Tewr.Blazor.FileReader.IFileReaderService fileReader
<h1 class="text-center">Gestión de Vehiculos</h1>
<MudNavLink Class="d-flex justify-start py-2 px-1 ml-4" Href="/vehiculos" Icon="@Icons.Filled.ArrowBack" Style="width: 150px">Regresar</MudNavLink>
<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Editar Vehículo</strong></MudText>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex pl-5">
                    <MudIcon Icon="@Icons.Material.Filled.DirectionsCar" Style=" color: #3f51b5" class="mr-3"> </MudIcon>
                    <MudText><strong>Información Principal</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string" Label="Tipo de vehiculo" Variant="_variant" Margin="_margin" Placeholder="Elige un tipo de vehiculo" @bind-Value="TipoVehiculoSeleccionado">
                            @if (_typevehicles != null) {
                                @foreach (var typevehicle in _typevehicles) {<MudSelectItem Value="@typevehicle.Id.ToString()"> @typevehicle.Namevehicle </MudSelectItem>}}
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudAutocomplete T="string" Label="Marca" Text="@MarcaSeleccionada" @bind-Value="MarcaSeleccionada" Variant="_variant" SearchFunc="@Search" ResetValueOnEmptyText="@_resetValueOnEmptyText" CoerceText="@_coerceText" Dense="true" Placeholder="Elige una marca" Margin="_margin" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="ModeloSeleccionado" Label="Modelo" Variant="_variant" Placeholder="Escribe el modelo" Margin="_margin" />
                    </MudItem>
                </MudGrid>

                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string" Label="Año" Variant="Variant.Outlined" @bind-Value="AgeSeleccionado" Margin="_margin">
                            @foreach (var age in _ages) {<MudSelectItem Value="@age"> @age </MudSelectItem>}
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField T="string" @bind-Value="Matricula"
                                      Label="Matricula"
                                      Variant="_variant"
                                      Adornment="_adornment"
                                      AdornmentIcon="@Icons.Material.Filled.Wysiwyg"
                                      Margin="_margin">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="PrecioPorDia"
                                      Label="Precio por dia"
                                      Variant="_variant"
                                      Adornment="_adornment"
                                      AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                      Margin="_margin">
                        </MudTextField>
                    </MudItem>
                </MudGrid>
            </ChildContent>
        </MudExpansionPanel>

        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex pl-5">
                    <MudIcon Icon="@Icons.Material.Filled.DirectionsCar" Style=" color: #3f51b5" class="mr-3"> </MudIcon>
                    <MudText><strong>Información Extra</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string" Label="Color" Variant="Variant.Outlined" @bind-Value="ColorSeleccionado" Margin="_margin">
                            @foreach (var color in _colors) {<MudSelectItem Value="@color"> @color </MudSelectItem>}
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="CapacidadCarga"
                                      Label="Capacidad de carga"
                                      Variant="_variant"
                                      Adornment="_adornment"
                                      AdornmentText="Kg"
                                      Margin="_margin">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="Pasajeros"
                                      Label="Pasajeros"
                                      Variant="_variant"
                                      Adornment="_adornment"
                                      AdornmentIcon="@Icons.Material.Filled.People"
                                      Margin="_margin">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField T="string" @bind-Value="NumeroSeguro"
                                      Label="No seguro"
                                      Variant="_variant"
                                      Adornment="_adornment"
                                      AdornmentText="#"
                                      Margin="_margin">
                        </MudTextField>
                    </MudItem>

                    <!--Aqui va la ubicacion-->
                    <MudItem xs="12" sm="6" md="8">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Ubicación del vehiculo</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <RadzenGoogleMap style="height: 200px" Zoom=8 Center=@(new Radzen.GoogleMapPosition() { Lat = Latitud, Lng = Longitud }) MapClick=@OnMapClick>
                                    <Markers>
                                        <RadzenGoogleMapMarker Title="@($"Vehiculo {MarcaSeleccionada}")" Label="@($"Vehiculo {MarcaSeleccionada}")" Position=@(new Radzen.GoogleMapPosition() { Lat = Latitud, Lng = Longitud }) />
                                    </Markers>
                                </RadzenGoogleMap>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="12" md="12">
                        <input type="file" name="image" @ref="inputReference" @onchange="async() =>await OpenFile()" />
                        <MudButton OnClick="async() =>await UploadFile()"
                                   Variant="_variant"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="vehiculopic"
                                   FullWidth="true">
                            Subir Imagen
                        </MudButton>
                    </MudItem>
                    @if (!string.IsNullOrWhiteSpace(message)) {
                        <MudItem xs="12" sm="12" md="12">
                            <img class="img-fluid img-thumbnail" src="@UrlImage" />
                        </MudItem>}
                </MudGrid>
            </ChildContent>
        </MudExpansionPanel>

        <MudGrid>
            <MudItem xs="12">
                <MudCardActions>
                    <MudButton @onclick="RegistrarVehiculo" ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto">Editar Vehiculo</MudButton>
                </MudCardActions>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
@code {
    [Parameter]
    public string Id { get; set; }

    private List<Typevehicle> _typevehicles;
    private List<Vehicle> _vehicles;
    private readonly string[] _marcasCarros = {
        "Toyota",
        "Volkswagen",
        "Ford",
        "Honda",
        "Nissan",
        "Hyundai",
        "Chevrolet",
        "Kia",
        "Mercedes-Benz",
        "BMW",
        "Renault",
        "Audi",
        "Maruti",
        "Peugeot",
        "Mazda",
        "Jeep",
        "Geely",
        "Fiat",
        "Skoda",
        "Changan",
        "Astondoa",
        "Cranchi",
    };
    private readonly List<string> _ages = new();
    private readonly string[] _colors = { "Negro",
        "Blanco",
        "Plateado",
        "Dorado",
        "Naranja",
        "Morado",
        "Verde",
        "Rojo",
        "Azul",
        "Amarillo",
        "Marrón"};


    private Vehicle _vehicle = new();

    public string NumeroSeguro { get; set; }
    public decimal PrecioPorDia { get; set; }
    public string Matricula { get; set; }
    public string TipoVehiculoSeleccionado { get; set; }
    public decimal CapacidadCarga { get; set; }
    public string AgeSeleccionado { get; set; }
    public string ColorSeleccionado { get; set; }
    public int Pasajeros { get; set; }
    public int Status { get; set; }
    public string MarcaSeleccionada { get; set; }
    public string Marca { get; set; }
    public string ModeloSeleccionado { get; set; }
    public string UrlImage { get; set; } = null;
    public double Latitud { get; set; } = 18.617612;
    public double Longitud { get; set; } = -68.7085308;

    Vehicle vehicle = new();
    string fileName = string.Empty;
    Stream fileStream = null;
    ElementReference inputReference;
    string message = string.Empty;

    private readonly Margin _margin = Margin.Dense;
    private readonly Variant _variant = Variant.Outlined;
    private readonly Adornment _adornment = Adornment.End;
    private bool _resetValueOnEmptyText;
    private bool _coerceText;

    protected override async Task OnInitializedAsync() {

        _typevehicles = await _http.GetFromJsonAsync<List<Typevehicle>>("api/tipovehiculo");
        _vehicles = await _http.GetFromJsonAsync<List<Vehicle>>("api/vehiculo");

        var ageActual = int.Parse((DateTime.Now.Year + 1).ToString());
        for (var i = 0; i < 100; i++) {
            _ages.Add(ageActual.ToString());
            ageActual--;
        }

        vehicle = await _http.GetFromJsonAsync<Vehicle>($"api/vehiculo/{Id}");

        MarcaSeleccionada = vehicle.Brand != null ? vehicle.Brand : "";
        ModeloSeleccionado = vehicle.Model != null ? vehicle.Model : "";
        AgeSeleccionado = vehicle.Age.ToString() != null ? vehicle.Age.ToString() : "";
        ColorSeleccionado = vehicle.Color != null ? vehicle.Color : "";
        PrecioPorDia = vehicle.Priceday.HasValue == true ? vehicle.Priceday.Value : 0;
        TipoVehiculoSeleccionado = vehicle.Typevehicleid.ToString() != null ? vehicle.Typevehicleid.ToString() : "";
        CapacidadCarga = vehicle.Weightcapacity.HasValue == true ? vehicle.Weightcapacity.Value : 0;
        Pasajeros = vehicle.Passengers.HasValue == true ? vehicle.Passengers.Value : 0;
        Matricula = vehicle.Matricula != null ? vehicle.Matricula : "";
        NumeroSeguro = vehicle.Securitynum != null ? vehicle.Securitynum : "";
        UrlImage = vehicle.Vehiclepic != null ? vehicle.Vehiclepic : "";
        Latitud = vehicle.Latitude.HasValue == true ? double.Parse(vehicle.Latitude.Value.ToString()) : 18.617612;
        Longitud = vehicle.Longitude.HasValue == true ? double.Parse(vehicle.Longitude.Value.ToString()) : -68.7085308;
        Status = vehicle.Status.HasValue == true ? vehicle.Status.Value : 1;
    }

    private async Task<IEnumerable<string>> Search(string value) {
        return string.IsNullOrEmpty(value) ? _marcasCarros : _marcasCarros.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void OnMapClick(Radzen.GoogleMapClickEventArgs args) {
        Latitud = args.Position.Lat;
        Longitud = args.Position.Lng;
    }

    private async Task UploadFile() {
        if (fileStream != null) {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var sc = new StreamContent(fileStream, (int)fileStream.Length);
            content.Add(sc, "file", fileName);

            var imagen = await _http.PostAsync("api/image/upload", content);
            if (imagen.IsSuccessStatusCode) {
                var body = await imagen.Content.ReadAsStringAsync();
                var resultado = JObject.Parse(body);
                message = resultado["message"].ToString();
                UrlImage = resultado["imageURL"].ToString();
                _snackbar.Add(message, Severity.Info);
            } else {
                _snackbar.Add($"Ha ocurrido un error, por favor revisar la imagen.", Severity.Error);
            }
        } else {
            _snackbar.Add($"Primero selecciona una imagen.", Severity.Warning);
        }

    }

    async Task OpenFile() {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null) {
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
            fileStream = new MemoryStream(ms.ToArray());
        }
    }

    private async Task RegistrarVehiculo() {
        Vehicle _vehicle = new() {
            Brand = MarcaSeleccionada,
            Model = ModeloSeleccionado,
            Age = int.Parse(AgeSeleccionado),
            Color = ColorSeleccionado,
            Priceday = PrecioPorDia,
            Typevehicleid = int.Parse(TipoVehiculoSeleccionado),
            Weightcapacity = CapacidadCarga,
            Passengers = Pasajeros,
            Matricula = Matricula,
            Securitynum = NumeroSeguro,
            Vehiclepic = UrlImage,
            Latitude = decimal.Parse(Latitud.ToString()),
            Longitude = decimal.Parse(Longitud.ToString()),
            Status = Status
        };
        var vehiculoCreado = await _http.PutAsJsonAsync($"api/vehiculo/{Id}", _vehicle);

        if (vehiculoCreado.IsSuccessStatusCode) {
            _snackbar.Add($"El vehiculo se ha editado correctamente.", Severity.Success);
            _navigationManager.NavigateTo("vehiculos");
        } else {
            _snackbar.Add($"Ha ocurrido un error, por favor revisar los datos.", Severity.Error);
        }
    }
}
