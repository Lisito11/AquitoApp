@page "/clientes/editar/{id}"
@attribute [Authorize]
@inject HttpClient _http
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject Tewr.Blazor.FileReader.IFileReaderService fileReader

<h1 class="text-center">Gestion de Cliente</h1>
<MudNavLink Href="/" Icon="@Icons.Filled.ArrowBack" Style="width: 150px">Regresar</MudNavLink>
<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Registrar Clientes</strong></MudText>
        <MudExpansionPanel Style="max-width: 1000px" IsExpanded="true" HideIcon="true">
            <TitleContent>
                <div class="d-flex pl-5">
                    <MudIcon Icon="@Icons.Material.Outlined.People" Style=" color: #3f51b5" class="mr-3"> </MudIcon>
                    <MudText><strong>Información Principal</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Cedula" Label="Cedula" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="FirstName" Label="Nombre" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="LastName" Label="Apellido" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Email" Label="Correo" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Licencia" Label="Licencia" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Margin="_margin" T="string" @bind-Value="Nacionality" Label="Nacionalidad" Variant="_variant"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudGrid Spacing="2">
                            <MudItem xs="12" sm="12" md="12">
                                <input type="file" name="image" @ref="inputReference1" @onchange="async() =>await OpenFile(1)" />
                                <MudButton OnClick="async() =>await UploadFile(1)"
                                           Variant="_variant"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           FullWidth="true">
                                    Subir Imagen Cliente
                                </MudButton>
                            </MudItem>
                            @if (!string.IsNullOrWhiteSpace(messageUser)) {
                                <MudItem xs="12" sm="12" md="12">
                                    <img class="img-fluid img-thumbnail" src="@UserPic" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudGrid Spacing="2">
                            <MudItem xs="12" sm="12" md="12">
                                <input type="file" name="image2" @ref="inputReference2" @onchange="async() =>await OpenFile(2)" />
                                <MudButton OnClick="async() =>await UploadFile(2)"
                                           Variant="_variant"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           FullWidth="true">
                                    Subir Imagen Licencia
                                </MudButton>
                            </MudItem>
                            @if (!string.IsNullOrWhiteSpace(messageLicence)) {
                                <MudItem xs="12" sm="12" md="12">
                                    <img class="img-fluid img-thumbnail" src="@LicencePic" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        <MudSelect T="string" Label="Tipo de sangre" Variant=" Variant.Outlined" @bind-Value="TipoBlood" Dense="true" Class="px-14.5px py-12.5px">
                            @foreach (var sangre in _tipoSangres) {<MudSelectItem Value="@sangre"> @sangre </MudSelectItem>}
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </ChildContent>
        </MudExpansionPanel>

        <MudGrid>
            <MudItem xs="12">
                <MudCardActions>
                    <MudButton @onclick="RegistrarCliente" ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto">Editar Cliente</MudButton>
                </MudCardActions>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>








@code {
    [Parameter]
    public string Id { get; set; }

    public string Cedula { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string Licencia { get; set; }
    public string Nacionality { get; set; }
    public string TipoBlood { get; set; }
    public string UserPic { get; set; }
    public string UrlImage { get; set; }
    public string LicencePic { get; set; }
    public int Status { get; set; }

    private List<string> _tipoSangres = new List<string>() { "O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-" };


    string fileName = string.Empty;
    Stream fileStream = null;
    ElementReference inputReference1;
    ElementReference inputReference2;
    string messageUser = string.Empty;
    string messageLicence = string.Empty;

    private readonly Margin _margin = Margin.Dense;
    private readonly Variant _variant = Variant.Outlined;
    private readonly Adornment _adornment = Adornment.End;

    private Client _cliente;

    protected override async Task OnInitializedAsync() {
        _cliente = await _http.GetFromJsonAsync<Client>($"api/client/{Id}");

        Cedula = _cliente.Cedula != null ? _cliente.Cedula : "";
        FirstName = _cliente.Firstname != null ? _cliente.Firstname : "";
        LastName = _cliente.Lastname != null ? _cliente.Lastname : "";
        Email = _cliente.Email != null ? _cliente.Email : "";
        Licencia = _cliente.Licence != null ? _cliente.Licence : "";
        Nacionality = _cliente.Nacionality != null ? _cliente.Nacionality : "";
        TipoBlood = _cliente.Typeblood != null ? _cliente.Typeblood : "";
        UserPic = _cliente.Userpic != null ? _cliente.Userpic : "";
        LicencePic = _cliente.Licencepic != null ? _cliente.Licencepic : "";
        Status = _cliente.Status.HasValue == true ? _cliente.Status.Value : 1;

    }
    private async Task UploadFile(int id) {
        //id = 1 -> Userpic
        //id = 2 -> Licenciapic
        if (fileStream != null) {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var sc = new StreamContent(fileStream, (int)fileStream.Length);
            content.Add(sc, "file", fileName);

            var imagen = await _http.PostAsync("api/image/upload", content);
            if (imagen.IsSuccessStatusCode) {
                var body = await imagen.Content.ReadAsStringAsync();
                var resultado = JObject.Parse(body);
                if (id == 1) {
                    UserPic = resultado["imageURL"].ToString();
                    messageUser = resultado["message"].ToString();
                    _snackbar.Add(messageUser, Severity.Info);


                } else {
                    LicencePic = resultado["imageURL"].ToString();
                    messageLicence = resultado["message"].ToString();
                    _snackbar.Add(messageLicence, Severity.Info);
                }

            } else {
                _snackbar.Add($"Ha ocurrido un error, por favor revisar la imagen.", Severity.Error);
            }
        } else {
            _snackbar.Add($"Primero selecciona una imagen.", Severity.Warning);
        }

    }
    private async Task OpenFile(int id) {
        IFileReference file;
        IFileInfo fileInfo;
        if (id == 1) {
            file = (await fileReader.CreateReference(inputReference1).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null) {
                return;
            }
            fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
                fileStream = new MemoryStream(ms.ToArray());
            }
        }
        if (id == 2) {
            file = (await fileReader.CreateReference(inputReference2).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null) {
                return;
            }
            fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
                fileStream = new MemoryStream(ms.ToArray());
            }
        }
    }

    private async Task RegistrarCliente() {
        Client _cliente = new() {
            Cedula = Cedula,
            Firstname = FirstName,
            Lastname = LastName,
            Email = Email,
            Licence = Licencia,
            Nacionality = Nacionality,
            Typeblood = TipoBlood,
            Userpic = UserPic,
            Licencepic = LicencePic,
            Status = Status
        };
        var clienteCreado = await _http.PutAsJsonAsync($"api/client/{Id}", _cliente);

        if (clienteCreado.IsSuccessStatusCode) {
            _snackbar.Add($"El cliente se ha editado correctamente.", Severity.Success);
            _navigationManager.NavigateTo("clientes");

        } else {
            _snackbar.Add($"Ha ocurrido un error, por favor revisar los datos.", Severity.Error);
        }
    }

}
