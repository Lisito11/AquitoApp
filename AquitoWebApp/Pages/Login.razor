@page "/auth/login"
@layout EmptyLayout
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager NavManager

<div style="max-width: 400px;">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard Outlined="true" Class="px-2 py-1">
            <MudCardContent class="pb-0">

                <MudText Typo="Typo.h4">Inicio de Sesión</MudText>
            </MudCardContent>
            <MudCardContent>

                <MudTextField Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" />

                <MudTextField Label="Contraseña" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)"
                              InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" FullWidth Variant="Variant.Filled" Color="Color.Primary"
                           Class="ml-auto">Login</MudButton>
            </MudCardActions>

            <MudCardContent>
                @if (isLoading && !success)
                {

                    <div>
                        <MudProgressCircular Color="Color.Info" Class="mx-auto" Indeterminate="true" />
                    </div>

                }
                else if (!success)
                {
                    <MudAlert Severity="Severity.Error">
                        Completa formulario correctamente.
                    </MudAlert>
                }

                @if (String.IsNullOrEmpty(ErrorAuthMessage) && showAuthError)
                {
                    <MudAlert Severity="Severity.Error">
                        @ErrorAuthMessage
                    </MudAlert>
                }
            </MudCardContent>

        </MudCard>



    </EditForm>
</div>

@code {
    private UserAuthViewModel model = new UserAuthViewModel();
    bool success;
    bool isLoading;
    bool showAuthError;
    string ErrorAuthMessage = String.Empty;

    public async Task OnValidSubmit()
    {
        isLoading = true;

        try
        {
            await ((AuthStateProvider)_authStateProvider).UserLogin(model);
            NavManager.NavigateTo("/");
            success = true;
        }
        catch (Exception ex)
        {
            showAuthError = true;
            ErrorAuthMessage = ex.Message;
        }



        isLoading = false;
        StateHasChanged();
    }
}