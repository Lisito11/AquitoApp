@page "/reportes"
@attribute [Authorize]
@inject HttpClient Http

@if (show)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="row">
                        <div id="title_modal" class="col-md-12">
                            <h5 class="modal-title" > @elVehiculo.Typevehicle.Namevehicle @elVehiculo.Brand modelo @elVehiculo.Model</h5>
                        </div>
                        <div class="col-md-12">
                            <img src="@elVehiculo.Vehiclepic"  class="card-img-top img_modal" alt="...">
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    <h5 class="modal_text">Matricula: @elVehiculo.Matricula</h5>
                    <h6 class="modal_text">Precio diario: @elVehiculo.Priceday</h6>
                    <h6 class="modal_text">Capacidad: @elVehiculo.Weightcapacity</h6>
                    <h6 class="modal_text">Color: @elVehiculo.Color</h6>
                    <h6 class="modal_text">Año: @elVehiculo.Age</h6>
                    <br />


                    @foreach (Reservation cita in citas)
                    {
                        <h5 class="modal_text">Cita: </h5>
                        <h6 class="modal_text">Cliente: @cita.Client.Firstname @cita.Client.Lastname</h6>
                        <h6 class="modal_text">Fecha de reserva: @cita.Startdate hasta @cita.Enddate</h6>
                    }

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="close">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<MudButton OnClick="@Modo" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@modoName</MudButton>
<br />
@if (modoMapa)
{
    <MudGrid>
        <MudItem xs="12">
            <RadzenGoogleMap style="height: 600px;" Zoom=@zoom Center=@(new Radzen.GoogleMapPosition() { Lat = 18.6176122, Lng = -68.7085308 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
                <Markers>
                    @foreach (var vehiculo in vehiculos)
                    {
                        <RadzenGoogleMapMarker Title="@vehiculo.Id.ToString()" Label="@vehiculo.Brand" Position=@(new Radzen.GoogleMapPosition() { Lat = double.Parse(vehiculo.Latitude.Value.ToString()), Lng = double.Parse(vehiculo.Longitude.Value.ToString()) }) />
                    }
                </Markers>
            </RadzenGoogleMap>
        </MudItem>
    </MudGrid>
}
@code {
    string modoName = "Modo Mapa";
    bool modoMapa = false;
    int zoom = 8;
    bool show = false;
    int id;
    int citada = 0;
    Vehicle elVehiculo;
    const int pendientePado = 2;
    const int pendienteNoPagado = 1;
    private List<Reservation> citas;

    private List<Vehicle> vehiculos = new List<Vehicle>();

    private void Modo()
    {
        if (modoMapa)
        {
            modoName = "Modo Mapa";
            modoMapa = false;
        }
        else
        {
            modoMapa = true;
            modoName = "Modo Lista";
        }

    }

    void OnMapClick(Radzen.GoogleMapClickEventArgs args)
    {
        Console.WriteLine($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    void OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        //Console.WriteLine($"Map {marker.Title} marker clicked. Marker position -> Lat: {marker.Position.Lat}, Lng: {marker.Position.Lng}");
        id = Convert.ToInt32(marker.Title);
        card(id);
    }


    protected override async Task OnInitializedAsync()
    {
        vehiculos = await Http.GetFromJsonAsync<List<Vehicle>>("api/vehiculo");
    }

    private async Task card(int id)
    {
        elVehiculo = await Http.GetFromJsonAsync<Vehicle>($"api/vehiculo/{id}");
        citas = elVehiculo.Reservations.Where(x => x.Status == pendienteNoPagado || x.Status == pendientePado).Take(3).ToList();
        foreach(var cita in citas)
        {
            cita.Client = await Http.GetFromJsonAsync<Client>($"api/client/{cita.Clientid}");
        }

        show = true;
    }

    private async Task close()
    {
        show = false;
    }
}
