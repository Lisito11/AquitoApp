@page "/reportes"
@attribute [Authorize]
@inject HttpClient _http
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@using System.Linq

<h1 class="text-center">Reportes</h1>
<MudNavLink Href="/" Icon="@Icons.Filled.ArrowBack" Style="width: 150px">Regresar</MudNavLink>

<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Elevation="2">
        <MudText Typo="Typo.h6"><strong>Listado de vehículos disponible en x rango de fecha</strong></MudText>

        <MudGrid Spacing="1" Justify="Justify.SpaceAround">
            <MudItem xs="12" sm="7" md="7">
                <MudDateRangePicker MinDate="DateTime.Today" Label="Fechas de reservación" @bind-DateRange="_dateRange" PickerVariant="PickerVariant.Static" />
            </MudItem>
            <MudItem xs="12" sm="5" md="5">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="12" md="12">
                        <MudTable Items="@_vehiclesDisponible" Hover="@true" Striped="@true" Dense="true">
                            <HeaderContent>
                                <MudTh>Foto</MudTh>
                                <MudTh>Tipo</MudTh>
                                <MudTh>Marca</MudTh>
                                <MudTh>Modelo </MudTh>
                                <MudTh>Año</MudTh>
                                <MudTh>Color  </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Foto"><MudAvatar Image="@((context.Vehiclepic) == null ? "" : context.Vehiclepic)"></MudAvatar></MudTd>
                                <MudTd DataLabel="Tipo">@((context.Typevehicle.Namevehicle) == null ? "" : context.Typevehicle.Namevehicle)</MudTd>
                                <MudTd DataLabel="Marca">@((context.Brand) == null ? "" : context.Brand)</MudTd>
                                <MudTd DataLabel="Modelo">@((context.Model) == null ? "" : context.Model)</MudTd>
                                <MudTd DataLabel="Año">@((context.Age) == null ? "" : context.Age)</MudTd>
                                <MudTd DataLabel="Color  ">@((context.Color) == null ? "" : context.Color)</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12">
                        <MudButton FullWidth="true" OnClick="@ObtenerVehiculosDisponibles" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CalendarToday" Color="Color.Primary">Ver vehiculos disponibles</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
        @*TODO LOS COMPONENTES DEL REPORTE AQUI ADENTRO (LISANNY)*@



    </MudPaper>
</div>

<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Clientes que deben</strong></MudText>



        @*TODO LOS COMPONENTES DEL REPORTE AQUI ADENTRO (ROY)*@
    <MudTable Items="@_debtorsClients" Hover="true" SortLabel="Sort By">
        <HeaderContent>

            <MudTh><MudTableSortLabel SortBy="new Func<Client, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Client, object>(x=>x.Cedula)">Cedula</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Client, object>(x=>x.Firstname)">Nombre</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Client, object>(x=>x.Lastname)">Apellido</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Client, object>(x=>x.Reservations.First().Startdate)">Monto</MudTableSortLabel></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Cedula">@context.Cedula</MudTd>
            <MudTd DataLabel="Nombre">@context.Firstname</MudTd>
            <MudTd DataLabel="Apellido">@context.Lastname</MudTd>
            <MudTd DataLabel="Monto">@context.Reservations</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>



    </MudPaper>
</div>

<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Listado de beneficios por vehículos</strong></MudText>

        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                    <th>Vehiculos</th>
                    <th>Reservaciones</th>
                    <th>Total facturado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vehiculo in vehiculos)
                {
                    @if (vehiculo.Status == 2 || vehiculo.Status == 4)
                    {
                        <tr>
                            <td>@vehiculo.Brand</td>
                            <td>@vehiculo.Status</td>
                            <td>@(vehiculo.Priceday) </td> 
                        </tr>
                    }

                }

            </tbody>
        </MudSimpleTable>

    </MudPaper>
</div>

<div class="mx-auto" style="max-width: 1300px;">
    <MudPaper Class="pa-10 ma-2" Elevation="2">
        <MudText Typo="Typo.h6"><strong>Ver vehículos en Mapa</strong></MudText>
        @if (show)
        {
            <div class="modal" tabindex="-1" style="display:block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="row">
                                <div id="title_modal" class="col-md-12">
                                    <h5 class="modal-title"> @elVehiculo.Typevehicle.Namevehicle @elVehiculo.Brand modelo @elVehiculo.Model</h5>
                                </div>
                                <div class="col-md-12">
                                    <img src="@elVehiculo.Vehiclepic" class="card-img-top img_modal" alt="...">
                                </div>
                            </div>
                        </div>
                        <div class="modal-body">
                            <h5 class="modal_text">Matricula: @elVehiculo.Matricula</h5>
                            <h6 class="modal_text">Precio diario: @elVehiculo.Priceday</h6>
                            <h6 class="modal_text">Capacidad: @elVehiculo.Weightcapacity</h6>
                            <h6 class="modal_text">Color: @elVehiculo.Color</h6>
                            <h6 class="modal_text">Año: @elVehiculo.Age</h6>
                            <br />


                            @foreach (Reservation cita in citas)
                            {
                                <h5 class="modal_text">Cita: </h5>
                                <h6 class="modal_text">Cliente: @cita.Client.Firstname @cita.Client.Lastname</h6>
                                <h6 class="modal_text">Fecha de reserva: @cita.Startdate hasta @cita.Enddate</h6>
                            }

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="close">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <MudGrid>
            <MudItem xs="12">
                <RadzenGoogleMap style="height: 600px;" Zoom=@zoom Center=@(new Radzen.GoogleMapPosition() { Lat = 18.6176122, Lng = -68.7085308 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
                    <Markers>
                        @foreach (var vehiculo in vehiculos)
                        {
                            <RadzenGoogleMapMarker Title="@vehiculo.Id.ToString()" Label="@vehiculo.Brand" Position=@(new Radzen.GoogleMapPosition() { Lat = double.Parse(vehiculo.Latitude.Value.ToString()), Lng = double.Parse(vehiculo.Longitude.Value.ToString()) }) />
                        }
                    </Markers>
                </RadzenGoogleMap>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>


@code {
        string modoName = "Modo Mapa";
        bool modoMapa = false;
        int zoom = 8;
        bool show = false;
        int id;
        int citada = 0;
        Vehicle elVehiculo;
        const int pendientePado = 2;
        const int pendienteNoPagado = 1;
        private List<Reservation> citas;
        private List<Vehicle> vehiculos = new List<Vehicle>();
        DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(1).Date);
        MyDateRange range;
        Vehicle vehiculoSeleccionado = new Vehicle();
        private List<Vehicle> _vehicles;
        private List<Vehicle> _vehiclesDisponible;
        private List<Reservation> _reservaciones;
        private IEnumerable<Client> _debtorsClients; // Clientes deudores
        public string IdVehiculoSeleccionado { get; set; }

        protected override async Task OnInitializedAsync() {

            Task[] tasks = new Task[]
            {
                GetAllDebTorsClientsAsync(),
                GetVehicles()
             };


            await Task.WhenAll(tasks);

    }

    private async Task GetVehicles()
    {
        _vehicles = await _http.GetFromJsonAsync<List<Vehicle>>("api/vehiculo");
        _vehiclesDisponible = _vehicles;
        vehiculos = await _http.GetFromJsonAsync<List<Vehicle>>("api/vehiculo");
    }

    private async Task GetAllDebTorsClientsAsync()
    {
        _debtorsClients = await _http.GetFromJsonAsync<List<Client>>("api/client/deben")
           ?? Array.Empty<Client>().AsEnumerable();
    }

    private async Task ObtenerVehiculosDisponibles() {
        _vehiclesDisponible = new List<Vehicle>();
        DateTime fechaInicio = _dateRange.Start.Value;
        DateTime fechaFin = _dateRange.End.Value;

        range = new MyDateRange(fechaInicio, fechaFin);

        foreach (var vehiculo in _vehicles) {
            var vehiculoDisponible = vehiculo.Reservations.Where(
            vh =>
                (
                    (vh.Status == 1 || vh.Status == 2)
                    &&
                    (vh.Enddate.Value > DateTime.Today)
                    &&
                    !(
                     (range.WithInRange(vh.Startdate.Value) && (vh.Startdate.Value.Day - _dateRange.Start.Value.Day) > 2) || (!range.WithInRange(vh.Startdate.Value))
                     ||
                     (range.WithInRange(vh.Enddate.Value) && (vh.Enddate.Value.Day - _dateRange.End.Value.Day) > 2) || (!range.WithInRange(vh.Enddate.Value))
                    )
                )      
            ).ToList();

            if (vehiculoDisponible.Count == 0) {
                _vehiclesDisponible.Add(vehiculo);
            }

        }
    }

    void OnMapClick(Radzen.GoogleMapClickEventArgs args)
    {
        Console.WriteLine($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    private async Task OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        //Console.WriteLine($"Map {marker.Title} marker clicked. Marker position -> Lat: {marker.Position.Lat}, Lng: {marker.Position.Lng}");
        id = Convert.ToInt32(marker.Title);
        await card(id);
    }

    private async Task card(int id)
    {
        elVehiculo = await _http.GetFromJsonAsync<Vehicle>($"api/vehiculo/{id}");
        citas = elVehiculo.Reservations.Where(x => x.Status == pendienteNoPagado || x.Status == pendientePado).Take(3).ToList();
        foreach (var cita in citas)
        {
            cita.Client = await _http.GetFromJsonAsync<Client>($"api/client/{cita.Clientid}");
        }

        show = true;
    }

    private async Task close()
    {
        show = false;
    }


}
